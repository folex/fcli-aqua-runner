aqua Main

export main, call

import "@fluencelabs/aqua-lib/builtin.aqua"
import "@fluencelabs/registry/subnetwork.aqua"
import Registry from "@fluencelabs/registry/registry-service.aqua"
-- import "/private/tmp/testproject/.fluence/aqua/services/service.aqua"

service Console("run-console"):
    print(any: ‚ä§)

-- IMPORTANT: remove '0x' and make it lower case
const DEAL_ID = "07b94f3570f86b541b2fc1ffe611589f6d7765b9"


-- "DSfTpMZRb49g6xuD57pGLfCeGc38XooKCeLPCqRXfJq6"
func main():
    on HOST_PEER_ID:
        peer_id <- getInsecuredPeerId()
        key_id <- Registry.get_key_id(DEAL_ID, peer_id)
        workers <- resolveSubnetwork(DEAL_ID)
    -- Console.print(["key_id is", key_id])
    if workers != nil:
        Console.print(workers!.length)
    else:
        Console.print(["No records found for key", key_id])

service Service("service"):
  greeting(name: string) -> string

func call():
    closure = (answer: string, peer: string):
      Console.print([answer, peer])

    answers: *string
    on HOST_PEER_ID:
        workers <- resolveSubnetwork(DEAL_ID)
        for w <- workers! par:
            on w.metadata.peer_id via w.metadata.relay_id:
                answer <- Service.greeting("folex")
                answers <<- answer
                closure(answer, w.metadata.peer_id)

    Console.print("before join")
    join answers[workers!.length - 1]
    par Peer.timeout(PARTICLE_TTL / 2, "azzaza")
    Console.print("done")
